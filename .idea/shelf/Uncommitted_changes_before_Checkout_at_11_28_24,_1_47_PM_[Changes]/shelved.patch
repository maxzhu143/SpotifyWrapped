Index: Wrappedapp/templates/base.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><head>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js\"></script>\n    <script src=\"https://sdk.scdn.co/spotify-player.js\"></script>\n    <script>\n        window.onSpotifyWebPlaybackSDKReady = () => {\n            const token = 'BQCgNy5hSQA9brVpA500xWZbNaVf2zNem1_LAW2t-Huam8I9gPQJzmXxDvYuZPSUIGfqjfWuEPTcXIUXYNEOgNthkP4yK1S3iHJre47zaLHHpYNkdwZCovH4VlKo7oPVF7S2T5H_SFCiWt4CMatJIfRJ18rigFKDJ9rOZTwGsms7dtuh-EPknvucuooCQTdGNG4d9jdui55MnKk';\n            const player = new Spotify.Player({\n                name: 'Web Playback SDK Quick Start Player',\n                getOAuthToken: cb => { cb(token); },\n                volume: 0.5\n            });\n\n            // Ready\n            player.on('ready', ({ device_id }) => {\n                console.log('Ready with Device ID', device_id);\n            });\n\n            // Not Ready\n            player.on('not_ready', ({ device_id }) => {\n                console.log('Device ID has gone offline', device_id);\n            });\n\n            player.on('initialization_error', ({ message }) => {\n                console.error(message);\n            });\n\n            player.on('authentication_error', ({ message }) => {\n                console.error(message);\n            });\n\n            player.on('account_error', ({ message }) => {\n                console.error(message);\n            });\n\n            document.getElementById('togglePlay').onclick = function() {\n              player.togglePlay();\n            };\n\n            player.connect();\n        }\n    </script>\n\n    <style>\n                /* Navbar Styling */\n        .navbar {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            padding: 20px 20px; /* Increase top and bottom padding to make it taller */\n            width: 100%;\n            box-sizing: border-box;\n            background-color: #1db954; /* Spotify green */\n            box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);\n        }\n\n        .navbar h1 {\n            color: #ffffff;\n            font-size: 1.5em;\n            font-weight: bold;\n            margin: 0;\n            white-space: nowrap;\n        }\n\n        /* Auth Links Styling */\n        .auth-links {\n            display: flex;\n            gap: 10px;\n            align-items: center;\n        }\n\n        /* Button Styles */\n        .auth-links .btn {\n            background-color: #1db954;\n            color: white;\n            border: none;\n            border-radius: 20px;\n            padding: 5px 10px;\n            font-size: 0.9rem;\n            font-weight: 500;\n            cursor: pointer;\n            transition: background-color 0.3s ease, transform 0.3s ease;\n            white-space: nowrap;\n            box-shadow: 0px 8px 15px rgba(0, 0, 0, 0.1);\n        }\n\n        /* Hover Effect for Buttons */\n        .auth-links .btn:hover {\n            background-color: #1ed760;\n            transform: scale(1.05);\n            box-shadow: 0px 12px 20px rgba(0, 0, 0, 0.2);\n        }\n\n        /* Responsive Adjustments for Smaller Screens */\n        @media (max-width: 600px) {\n            .navbar h1 {\n                font-size: 18px;\n            }\n            .auth-links {\n                flex-direction: column;\n                gap: 8px;\n                width: 100%;\n                align-items: flex-start;\n            }\n            .auth-links .btn {\n                width: 100%; /* Full width for smaller screens */\n                text-align: center;\n            }\n        }\n    </style>\n</head>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>{% block title %}Spotify Wrapped{% endblock %}</title>\n    {% load static %}\n    {% load django_bootstrap5 %}\n    {% bootstrap_css %}\n  <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body>\n    {% bootstrap_javascript %}\n  <!-- Navigation bar -->\n  <nav class=\"navbar\">\n    <a href=\"{% url 'dashboard' %}\" class=\"logo\">\n        <h1>Spotify Wrapped</h1>\n    </a>\n    <div class=\"auth-links\">\n        {% if user.is_authenticated %}\n            <a href=\"{% url 'dashboard' %}\" class=\"btn\">Dashboard</a>\n            <form method=\"POST\" action=\"{% url 'logout' %}\">\n                {% csrf_token %}\n                <button type=\"submit\" class=\"btn\">Log Out</button>\n            </form>\n        {% else %}\n            <a href=\"{% url 'register' %}\" class=\"btn\">Sign Up</a>\n            <a href=\"{% url 'login' %}\" class=\"btn\">Log In</a>\n        {% endif %}\n        <a href=\"{% url 'contact_developers' %}\" class=\"btn btn-primary\">Contact the Developers</a>\n    </div>\n  </nav>\n\n\n  <!-- Main content area for other templates -->\n  <main>\n      {% block content %}{% endblock %}\n  </main>\n\n</body>\n</html>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Wrappedapp/templates/base.html b/Wrappedapp/templates/base.html
--- a/Wrappedapp/templates/base.html	(revision 8f9038fc25f3a734f8631807625a07bbbcaf0428)
+++ b/Wrappedapp/templates/base.html	(date 1732819366406)
@@ -3,42 +3,91 @@
     <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
     <script src="https://sdk.scdn.co/spotify-player.js"></script>
     <script>
+        let token = "{{ spotify_access_token|default:'' }}";
+        const refreshUrl = "{% url 'refresh_token' %}";
+
+        async function refreshToken() {
+            try {
+                const response = await fetch(refreshUrl, { method: 'POST', credentials: 'include' });
+                const data = await response.json();
+                if (response.ok) {
+                    token = data.access_token;
+                    console.log("Token refreshed:", token);
+                } else {
+                    console.error("Failed to refresh token:", data.error);
+                }
+            } catch (error) {
+                console.error("Error refreshing token:", error);
+            }
+        }
+
         window.onSpotifyWebPlaybackSDKReady = () => {
-            const token = 'BQCgNy5hSQA9brVpA500xWZbNaVf2zNem1_LAW2t-Huam8I9gPQJzmXxDvYuZPSUIGfqjfWuEPTcXIUXYNEOgNthkP4yK1S3iHJre47zaLHHpYNkdwZCovH4VlKo7oPVF7S2T5H_SFCiWt4CMatJIfRJ18rigFKDJ9rOZTwGsms7dtuh-EPknvucuooCQTdGNG4d9jdui55MnKk';
             const player = new Spotify.Player({
-                name: 'Web Playback SDK Quick Start Player',
+                name: 'Spotify Wrapped Player',
                 getOAuthToken: cb => { cb(token); },
-                volume: 0.5
+            });
+
+            // Error handling
+            player.addListener('initialization_error', ({ message }) => { console.error(message); });
+            player.addListener('authentication_error', ({ message }) => {
+                console.error(message);
+                // Try refreshing the token if authentication fails
+                refreshToken().then(() => {
+                    player.connect();
+                });
+            });
+            player.addListener('account_error', ({ message }) => { console.error(message); });
+            player.addListener('playback_error', ({ message }) => { console.error(message); });
+
+            // Playback status updates
+            player.addListener('player_state_changed', state => {
+                console.log(state);
             });
 
             // Ready
-            player.on('ready', ({ device_id }) => {
+            player.addListener('ready', ({ device_id }) => {
                 console.log('Ready with Device ID', device_id);
+                window.spotifyDeviceId = device_id;
             });
 
             // Not Ready
-            player.on('not_ready', ({ device_id }) => {
+            player.addListener('not_ready', ({ device_id }) => {
                 console.log('Device ID has gone offline', device_id);
             });
 
-            player.on('initialization_error', ({ message }) => {
-                console.error(message);
-            });
-
-            player.on('authentication_error', ({ message }) => {
-                console.error(message);
-            });
-
-            player.on('account_error', ({ message }) => {
-                console.error(message);
-            });
-
-            document.getElementById('togglePlay').onclick = function() {
-              player.togglePlay();
-            };
-
             player.connect();
-        }
+
+            // Event delegation for play buttons
+            document.addEventListener('click', function(e) {
+                if (e.target && e.target.classList.contains('play-button')) {
+                    const uri = e.target.getAttribute('data-uri');
+                    playSong(uri);
+                }
+            });
+
+            function playSong(uri) {
+                fetch(`https://api.spotify.com/v1/me/player/play?device_id=${window.spotifyDeviceId}`, {
+                    method: 'PUT',
+                    body: JSON.stringify({ uris: [uri] }),
+                    headers: {
+                        'Authorization': `Bearer ${token}`,
+                        'Content-Type': 'application/json',
+                    },
+                }).then(response => {
+                    if (!response.ok && response.status === 401) {
+                        // Token might have expired, refresh it
+                        refreshToken().then(() => {
+                            playSong(uri); // Retry playing the song
+                        });
+                    }
+                }).catch(error => {
+                    console.error('Error playing song:', error);
+                });
+            }
+        };
+
+        // Periodically refresh the token before it expires
+        setInterval(refreshToken, 3000 * 1000); // Refresh every 50 minutes
     </script>
 
     <style>
Index: Wrappedapp/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.db import models\nfrom django.contrib.auth.models import User\nfrom datetime import datetime\n\n\nclass SpotifyAccount(models.Model):\n    \"\"\"\n    Represents a user's linked Spotify account, storing authentication tokens\n    and related metadata.\n    \"\"\"\n    user = models.OneToOneField(\n        User,\n        on_delete=models.CASCADE,\n        related_name=\"spotify_account\"\n    )\n    access_token = models.CharField(\n        max_length=255,\n        help_text=\"The access token for Spotify API requests.\"\n    )\n    refresh_token = models.CharField(\n        max_length=255,\n        help_text=\"The refresh token for renewing the access token.\"\n    )\n    expires_at = models.DateTimeField(null=True, blank=True)\n    display_name = models.CharField(\n        max_length=255,\n        null=True,\n        blank=True,\n        help_text=\"Spotify display name of the linked account.\"\n    )\n    spotify_id = models.CharField(\n        max_length=255,\n        null=True,\n        blank=True,\n        help_text=\"The unique Spotify ID for the account.\"\n    )\n    profile_url = models.URLField(\n        null=True,\n        blank=True,\n        help_text=\"URL to the user's Spotify profile.\"\n    )\n    profile_image = models.URLField(\n        null=True,\n        blank=True,\n        help_text=\"URL to the user's Spotify profile image.\"\n    )\n\n    def is_token_expired(self):\n        \"\"\"Checks if the current access token has expired.\"\"\"\n        return datetime.now() >= self.expires_at\n\n    def __str__(self):\n        return f\"{self.user.username}'s Spotify Account\"\n\n\nclass ListeningHistory(models.Model):\n    \"\"\"\n    Represents a user's listening history retrieved from Spotify.\n    \"\"\"\n    spotify_account = models.ForeignKey(\n        SpotifyAccount,\n        on_delete=models.CASCADE,\n        related_name=\"listening_history\"\n    )\n    track_name = models.CharField(max_length=255)\n    artist_name = models.CharField(max_length=255)\n    album_name = models.CharField(max_length=255, null=True, blank=True)\n    played_at = models.DateTimeField()\n    duration_ms = models.IntegerField(\n        help_text=\"Duration of the track in milliseconds.\"\n    )\n\n    def __str__(self):\n        return f\"{self.track_name} by {self.artist_name}\"\n\n\nclass WrappedSummary(models.Model):\n    \"\"\"\n    Represents a user's Spotify Wrapped summary for the year.\n    \"\"\"\n    spotify_account = models.ForeignKey(\n        SpotifyAccount,\n        on_delete=models.CASCADE,\n        related_name=\"wrapped_summaries\"\n    )\n    year = models.IntegerField(help_text=\"The year this summary covers.\")\n    top_tracks = models.JSONField(\n        help_text=\"JSON representation of the user's top tracks.\"\n    )\n    top_artists = models.JSONField(\n        help_text=\"JSON representation of the user's top artists.\"\n    )\n    top_genres = models.JSONField(\n        help_text=\"JSON representation of the user's top genres.\"\n    )\n    listening_minutes = models.IntegerField(\n        help_text=\"Total minutes listened during the year.\"\n    )\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f\"{self.spotify_account.user.username}'s Wrapped {self.year}\"\n\nfrom django.db import models\nfrom django.conf import settings\n\nclass SpotifyWrapped(models.Model):\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name=\"wrapped_objects\")\n    title = models.CharField(max_length=255, default=\"My Spotify Wrapped\")  # Optional title\n    top_songs = models.JSONField(default=list)  # Example: List of songs\n    top_artists = models.JSONField(default=dict)  # Example: List of artists\n    top_genres = models.JSONField(default=dict)  # Example: List of genres\n    personality = models.CharField(max_length=255, null=True, blank=True)  # Optional string field\n    total_minutes_listened = models.IntegerField(default=0)  # Example: Total listening time\n    sound_town = models.CharField(max_length=255, null=True, blank=True)\n    artist_thank_you = models.CharField(max_length=255, null=True, blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    top_podcasts = models.JSONField(default=dict)\n    personality_word = models.CharField(max_length=255, null=True, blank=True)\n\n    def __str__(self):\n        return f\"Wrapped {self.title} for {self.user.username}\"\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Wrappedapp/models.py b/Wrappedapp/models.py
--- a/Wrappedapp/models.py	(revision 8f9038fc25f3a734f8631807625a07bbbcaf0428)
+++ b/Wrappedapp/models.py	(date 1732819500267)
@@ -1,6 +1,11 @@
 from django.db import models
 from django.contrib.auth.models import User
 from datetime import datetime
+from django.db import models
+from django.contrib.auth.models import User
+from datetime import timedelta
+from django.utils import timezone
+from django.utils.timezone import now
 
 
 class SpotifyAccount(models.Model):
@@ -120,3 +125,17 @@
 
     def __str__(self):
         return f"Wrapped {self.title} for {self.user.username}"
+
+class SpotifyToken(models.Model):
+    user = models.OneToOneField(User, on_delete=models.CASCADE)
+    access_token = models.CharField(max_length=255)
+    refresh_token = models.CharField(max_length=255)
+    expires_at = models.DateTimeField()
+
+    def is_expired(self):
+        return timezone.now() >= self.expires_at
+
+    def update_token(self, access_token, expires_in):
+        self.access_token = access_token
+        self.expires_at = timezone.now() + timedelta(seconds=expires_in)
+        self.save()
\ No newline at end of file
Index: Wrappedapp/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\n\"\"\"URL routing for Wrappedapp.\"\"\"\n\nfrom django.urls import path\nfrom django.contrib.auth import views as auth_views\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),  # Home page\n    path('register/', views.register, name='register'),\n    path('login/', auth_views.LoginView.as_view(template_name='login.html'), name='login'),\n    path('dashboard/', views.dashboard, name='dashboard'),  # Dashboard route\n    path('logout/', views.custom_logout_view, name='logout'),    # Custom logout page\n    path('spotify-authorize/', views.spotify_authorize, name='spotify_authorize'),\n    path('callback/', views.spotify_callback, name='spotify_callback'),\n    path('unlink/', views.unlink, name='unlink'),\n    path('contact/', views.contact_developers, name='contact_developers'),\n    path('create_wrapped/', views.create_wrapped, name='create_wrapped'),\n    path('wrapped_carousel/<int:wrapped_id>/', views.wrapped_carousel, name='wrapped_carousel'),\n    path('wrapped/delete/<int:wrapped_id>/', views.delete_wrapped, name='delete_wrapped'),\n\n]\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Wrappedapp/urls.py b/Wrappedapp/urls.py
--- a/Wrappedapp/urls.py	(revision 8f9038fc25f3a734f8631807625a07bbbcaf0428)
+++ b/Wrappedapp/urls.py	(date 1732819331204)
@@ -18,6 +18,6 @@
     path('create_wrapped/', views.create_wrapped, name='create_wrapped'),
     path('wrapped_carousel/<int:wrapped_id>/', views.wrapped_carousel, name='wrapped_carousel'),
     path('wrapped/delete/<int:wrapped_id>/', views.delete_wrapped, name='delete_wrapped'),
-
+    path('refresh_token/', views.refresh_token_view, name='refresh_token'),
 ]
 
Index: Wrappedapp/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"Views for Wrappedapp.\"\"\"\nimport urllib.parse\nfrom django.contrib.auth import login, logout\nfrom django.conf import settings\nfrom django.http import JsonResponse\nfrom django.shortcuts import render, redirect\nfrom .forms import SignUpForm\nimport openai\nfrom django.views.decorators.csrf import csrf_exempt\nimport json\nfrom django.contrib.auth.decorators import login_required\nimport requests\nfrom django.shortcuts import render, redirect\nfrom django.http import JsonResponse\n\nfrom .openai_functions import generate_psychoanalysis\nfrom .spotify_api_functions import (\n    get_valid_spotify_token, get_top_songs, get_top_artists, get_top_genres,\n    get_sound_town, get_total_minutes_listened, get_artist_thank_you\n)\nfrom datetime import datetime, timedelta\nfrom django.shortcuts import redirect\nfrom Wrappedapp.models import SpotifyWrapped, SpotifyAccount\nfrom django.utils import timezone\nfrom django.shortcuts import get_object_or_404\n\n\nopenai.api_key = settings.OPENAI_API_KEY\nclient_id = settings.SPOTIFY_CLIENT_ID\nclient_secret = settings.SPOTIFY_CLIENT_SECRET\nredirect_uri = settings.SPOTIFY_REDIRECT_URI\n\n\n\ndef spotify_callback(request):\n    code = request.GET.get(\"code\")\n    if not code:\n        return redirect('error')  # Handle missing code gracefully\n\n    # Exchange code for tokens\n    token_url = \"https://accounts.spotify.com/api/token\"\n    response = requests.post(token_url, data={\n        \"grant_type\": \"authorization_code\",\n        \"code\": code,\n        \"redirect_uri\": settings.SPOTIFY_REDIRECT_URI,\n        \"client_id\": settings.SPOTIFY_CLIENT_ID,\n        \"client_secret\": settings.SPOTIFY_CLIENT_SECRET,\n    })\n\n    if response.status_code == 200:\n        tokens = response.json()\n        access_token = tokens.get(\"access_token\")\n        refresh_token = tokens.get(\"refresh_token\")\n        expires_in = tokens.get(\"expires_in\", 3600)  # Default to 3600 seconds if missing\n\n        # Ensure expires_at is calculated\n        if expires_in is None:\n            expires_in = 3600  # Fallback to 1 hour\n        expires_at = datetime.now() + timedelta(seconds=expires_in)\n\n        # Save or update the SpotifyAccount\n        spotify_account, created = SpotifyAccount.objects.get_or_create(user=request.user)\n        spotify_account.access_token = access_token\n        spotify_account.refresh_token = refresh_token\n        spotify_account.expires_at = expires_at\n        spotify_account.save()\n\n        return redirect('dashboard')\n\n    else:\n        print(f\"Spotify API error: {response.status_code} - {response.text}\")\n        return redirect('error')  # Handle API errors gracefully\n\n@csrf_exempt  # CSRF protection is already handled in the form\ndef unlink(request):\n    try:\n        # Delete the SpotifyAccount for the current user\n        SpotifyAccount.objects.filter(user=request.user).delete()\n    except SpotifyAccount.DoesNotExist:\n        pass  # Handle cases where the account doesn't exist gracefully\n    return redirect('dashboard')  # Redirect to the dashboard\n\ndef home(request):\n    return render(request, \"home.html\")\n\n@login_required\ndef dashboard(request):\n    # Check if the Spotify account is linked\n    spotify_account = SpotifyAccount.objects.filter(user=request.user).first()\n\n    # Get the user's saved SpotifyWrapped objects\n    wrapped_objects = SpotifyWrapped.objects.filter(user=request.user).order_by('-created_at')\n\n\n    access_token = request.session.get('access_token')\n\n    profile_response = requests.get('https://api.spotify.com/v1/me', headers={'Authorization': f'Bearer {access_token}'})\n    user_name = profile_response.json().get('display_name', 'Spotify User')\n\n\n    context = {\n        \"spotify_account\": spotify_account,\n        \"spotify_linked\": bool(spotify_account),  # True if Spotify account is linked\n        \"wrapped_objects\": wrapped_objects,  # Add the saved wrapped objects to the context\n        \"user_name\" : user_name,\n    }\n    return render(request, \"dashboard.html\", context)\n\ndef register(request):\n    \"\"\"Handle user registration.\"\"\"\n    if request.method == 'POST':\n        form = SignUpForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)  # Log the user in after registration\n            return redirect('dashboard')  # Redirect to dashboard after registering\n    else:\n        form = SignUpForm()\n\n    return render(request, 'register.html', {'form': form})\n\ndef contact_developers(request):\n    return render(request, 'contact_developers.html')\n\ndef spotify_authorize(request):\n    spotify_auth_url = \"https://accounts.spotify.com/authorize\"\n    params = {\n        \"client_id\": settings.SPOTIFY_CLIENT_ID,\n        \"response_type\": \"code\",\n        \"redirect_uri\": settings.SPOTIFY_REDIRECT_URI,\n        \"scope\": \"streaming user-read-playback-state user-modify-playback-state user-read-currently-playing\",\n    }\n    auth_url = f\"{spotify_auth_url}?{urllib.parse.urlencode(params)}\"\n    return redirect(auth_url)\n\n\n\n\n@login_required\ndef wrapped_carousel(request, wrapped_id):\n    \"\"\"\n    View to render the Wrapped Carousel page for a specific SpotifyWrapped object.\n    \"\"\"\n    try:\n        # Fetch the specific SpotifyWrapped object for the user\n        wrapped = SpotifyWrapped.objects.get(id=wrapped_id, user=request.user)\n\n        # Get a valid access token for playback\n        try:\n            spotify_access_token = get_valid_spotify_token(request.user)\n        except Exception as token_error:\n            spotify_access_token = None\n            print(f\"Error fetching Spotify token: {token_error}\")\n\n        # Process top songs for the carousel\n        top_songs = wrapped.top_songs if wrapped.top_songs else []  # Ensure it's a list\n\n        # Add fallback values for each song in top_songs\n        default_cover = 'https://via.placeholder.com/150'\n        for song in top_songs:\n            song['spotify_url'] = song.get('spotify_url', '#')  # Fallback to '#' if no URL\n            song['album_cover'] = song.get('album_cover', default_cover)  # Default cover image\n            song['artist'] = song.get('artist', 'Unknown Artist')  # Fallback artist name\n            song['name'] = song.get('name', 'Unknown Song')  # Fallback song name\n\n        # Pass the Wrapped object, top songs, and access token to the template\n        return render(request, 'wrapped_carousel.html', {\n            'wrapped': wrapped,\n            'top_songs': top_songs,  # Pass the top songs data to the template\n            'spotify_access_token': spotify_access_token,  # Pass the token for playback\n        })\n\n    except SpotifyWrapped.DoesNotExist:\n        # Handle case where the Wrapped object does not exist\n        return render(request, 'error.html', {'message': 'Spotify Wrapped not found.'})\n    except Exception as e:\n        # Handle unexpected errors\n        print(f\"Unexpected error in wrapped_carousel: {e}\")\n        return render(request, 'error.html', {'message': 'An unexpected error occurred.'})\n\n\n\n\n@login_required\ndef create_wrapped(request):\n    try:\n        # Fetch Spotify token from the linked account\n        spotify_token = get_valid_spotify_token(request.user)\n        print(request.user)\n        # Fetch data from Spotify API\n        top_songs = get_top_songs(spotify_token)\n        top_artists = get_top_artists(spotify_token)\n        top_genres = get_top_genres(spotify_token)\n        total_minutes = get_total_minutes_listened(spotify_token)\n        sound_town = get_sound_town(top_genres)\n        artist_thank_you = get_artist_thank_you(spotify_token)\n        personality, personality_word = generate_psychoanalysis(top_songs, top_artists, top_genres, total_minutes)\n\n\n        # Create a new SpotifyWrapped object\n        wrapped = SpotifyWrapped.objects.create(\n            user=request.user,\n            title=f\"My Spotify Wrapped {SpotifyWrapped.objects.filter(user=request.user).count() + 1}\",\n            top_songs=top_songs,\n            top_artists=top_artists,\n            top_genres=top_genres,\n            personality=personality,\n            personality_word=personality_word,\n            total_minutes_listened=total_minutes,\n            sound_town=sound_town,\n            artist_thank_you=artist_thank_you,\n        )\n\n        # Redirect to the carousel view to display the new Wrapped data\n        return redirect('wrapped_carousel', wrapped_id=wrapped.id)\n    except Exception as e:\n        print(f\"Error fetching Spotify data: {e}\")\n        return render(request, 'error.html', {'message': f\"Failed to create Spotify Wrapped: {e}\"})\n\n@login_required\ndef custom_logout_view(request):\n    logout(request)\n    return render(request, 'logout.html')\n\n@login_required\ndef delete_wrapped(request, wrapped_id):\n    wrapped = get_object_or_404(SpotifyWrapped, id=wrapped_id, user=request.user)\n    wrapped.delete()\n    return redirect('dashboard')  # Replace 'home' with the name of your main page or Wrapped list page.\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Wrappedapp/views.py b/Wrappedapp/views.py
--- a/Wrappedapp/views.py	(revision 8f9038fc25f3a734f8631807625a07bbbcaf0428)
+++ b/Wrappedapp/views.py	(date 1732819456668)
@@ -20,9 +20,11 @@
 )
 from datetime import datetime, timedelta
 from django.shortcuts import redirect
-from Wrappedapp.models import SpotifyWrapped, SpotifyAccount
+from Wrappedapp.models import SpotifyWrapped, SpotifyAccount, SpotifyToken
 from django.utils import timezone
 from django.shortcuts import get_object_or_404
+from .spotify_api_functions import refresh_spotify_token
+from django.urls import reverse
 
 
 openai.api_key = settings.OPENAI_API_KEY
@@ -33,44 +35,44 @@
 
 
 def spotify_callback(request):
-    code = request.GET.get("code")
-    if not code:
-        return redirect('error')  # Handle missing code gracefully
+    code = request.GET.get('code')
+    error = request.GET.get('error')
+
+    if error:
+        return render(request, 'error.html', {'message': 'Error during Spotify authentication.'})
 
-    # Exchange code for tokens
-    token_url = "https://accounts.spotify.com/api/token"
-    response = requests.post(token_url, data={
-        "grant_type": "authorization_code",
-        "code": code,
-        "redirect_uri": settings.SPOTIFY_REDIRECT_URI,
-        "client_id": settings.SPOTIFY_CLIENT_ID,
-        "client_secret": settings.SPOTIFY_CLIENT_SECRET,
+    # Exchange code for access and refresh tokens
+    response = requests.post('https://accounts.spotify.com/api/token', data={
+        'grant_type': 'authorization_code',
+        'code': code,
+        'redirect_uri': 'your_redirect_uri',
+        'client_id': 'your_client_id',
+        'client_secret': 'your_client_secret',
     })
 
-    if response.status_code == 200:
-        tokens = response.json()
-        access_token = tokens.get("access_token")
-        refresh_token = tokens.get("refresh_token")
-        expires_in = tokens.get("expires_in", 3600)  # Default to 3600 seconds if missing
+    if response.status_code != 200:
+        return render(request, 'error.html', {'message': 'Failed to retrieve tokens from Spotify.'})
 
-        # Ensure expires_at is calculated
-        if expires_in is None:
-            expires_in = 3600  # Fallback to 1 hour
-        expires_at = datetime.now() + timedelta(seconds=expires_in)
+    token_data = response.json()
+    access_token = token_data['access_token']
+    refresh_token = token_data['refresh_token']
+    expires_in = token_data['expires_in']  # Token lifetime in seconds
 
-        # Save or update the SpotifyAccount
-        spotify_account, created = SpotifyAccount.objects.get_or_create(user=request.user)
-        spotify_account.access_token = access_token
-        spotify_account.refresh_token = refresh_token
-        spotify_account.expires_at = expires_at
-        spotify_account.save()
+    # Calculate the token expiration time
+    expires_at = timezone.now() + timedelta(seconds=expires_in)
+
+    # Save tokens to the database
+    SpotifyToken.objects.update_or_create(
+        user=request.user,
+        defaults={
+            'access_token': access_token,
+            'refresh_token': refresh_token,
+            'expires_at': expires_at,
+        }
+    )
 
-        return redirect('dashboard')
+    return redirect('dashboard')
 
-    else:
-        print(f"Spotify API error: {response.status_code} - {response.text}")
-        return redirect('error')  # Handle API errors gracefully
-
 @csrf_exempt  # CSRF protection is already handled in the form
 def unlink(request):
     try:
@@ -136,47 +138,33 @@
 
 
 
+
+
+
 @login_required
 def wrapped_carousel(request, wrapped_id):
-    """
-    View to render the Wrapped Carousel page for a specific SpotifyWrapped object.
-    """
     try:
-        # Fetch the specific SpotifyWrapped object for the user
+        # Ensure the Spotify token is refreshed and valid
+        spotify_access_token = refresh_spotify_token(request.user)
+
+        # Fetch Wrapped data
         wrapped = SpotifyWrapped.objects.get(id=wrapped_id, user=request.user)
-
-        # Get a valid access token for playback
-        try:
-            spotify_access_token = get_valid_spotify_token(request.user)
-        except Exception as token_error:
-            spotify_access_token = None
-            print(f"Error fetching Spotify token: {token_error}")
+        top_songs = wrapped.top_songs or []
 
-        # Process top songs for the carousel
-        top_songs = wrapped.top_songs if wrapped.top_songs else []  # Ensure it's a list
-
-        # Add fallback values for each song in top_songs
-        default_cover = 'https://via.placeholder.com/150'
+        # Update top_songs to ensure each song has a 'uri' field
         for song in top_songs:
-            song['spotify_url'] = song.get('spotify_url', '#')  # Fallback to '#' if no URL
-            song['album_cover'] = song.get('album_cover', default_cover)  # Default cover image
-            song['artist'] = song.get('artist', 'Unknown Artist')  # Fallback artist name
-            song['name'] = song.get('name', 'Unknown Song')  # Fallback song name
+            song['uri'] = song.get('uri')  # Make sure 'uri' is included
 
-        # Pass the Wrapped object, top songs, and access token to the template
         return render(request, 'wrapped_carousel.html', {
             'wrapped': wrapped,
-            'top_songs': top_songs,  # Pass the top songs data to the template
-            'spotify_access_token': spotify_access_token,  # Pass the token for playback
+            'top_songs': top_songs,
+            'spotify_access_token': spotify_access_token,
         })
-
-    except SpotifyWrapped.DoesNotExist:
-        # Handle case where the Wrapped object does not exist
-        return render(request, 'error.html', {'message': 'Spotify Wrapped not found.'})
     except Exception as e:
-        # Handle unexpected errors
-        print(f"Unexpected error in wrapped_carousel: {e}")
-        return render(request, 'error.html', {'message': 'An unexpected error occurred.'})
+        print(f"Error in wrapped_carousel: {e}")
+        return render(request, 'error.html', {'message': 'An error occurred.'})
+
+
 
 
 
@@ -228,3 +216,9 @@
     wrapped.delete()
     return redirect('dashboard')  # Replace 'home' with the name of your main page or Wrapped list page.
 
+def refresh_token_view(request):
+    try:
+        access_token = refresh_spotify_token(request.user)
+        return JsonResponse({'access_token': access_token})
+    except Exception as e:
+        return JsonResponse({'error': str(e)}, status=400)
\ No newline at end of file
Index: Wrappedapp/spotify_api_functions.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import requests\n\nfrom datetime import datetime, timedelta\nimport requests\nfrom django.conf import settings\nfrom .models import SpotifyAccount\nfrom django.utils import timezone\nimport urllib.parse\nfrom django.contrib.auth import login, logout\nfrom django.conf import settings\nfrom django.http import JsonResponse\nfrom django.shortcuts import render, redirect\nfrom .forms import SignUpForm\nimport openai\nfrom django.views.decorators.csrf import csrf_exempt\nimport json\nfrom django.contrib.auth.decorators import login_required\nimport requests\nfrom django.shortcuts import render, redirect\nfrom django.http import JsonResponse\n\nfrom datetime import datetime, timedelta\nfrom django.shortcuts import redirect\nfrom Wrappedapp.models import SpotifyWrapped, SpotifyAccount\nfrom django.utils import timezone\n\nopenai.api_key = settings.OPENAI_API_KEY\nclient_id = settings.SPOTIFY_CLIENT_ID\nclient_secret = settings.SPOTIFY_CLIENT_SECRET\nredirect_uri = settings.SPOTIFY_REDIRECT_URI\n\ndef get_valid_spotify_token(user):\n    \"\"\"\n    Retrieves a valid Spotify access token for the given user.\n    Refreshes the token if it has expired.\n    \"\"\"\n    try:\n        # Retrieve the SpotifyAccount object for the user\n        spotify_account = SpotifyAccount.objects.get(user=user)\n\n        # Check if the access token is still valid\n        if spotify_account.expires_at > timezone.now():\n            return spotify_account.access_token\n\n        # Token is expired; attempt to refresh it\n        refresh_url = \"https://accounts.spotify.com/api/token\"\n        response = requests.post(refresh_url, data={\n            \"grant_type\": \"refresh_token\",\n            \"refresh_token\": spotify_account.refresh_token,\n            \"client_id\": settings.SPOTIFY_CLIENT_ID,\n            \"client_secret\": settings.SPOTIFY_CLIENT_SECRET,\n        })\n\n        if response.status_code == 200:\n            tokens = response.json()\n            new_access_token = tokens.get(\"access_token\")\n            expires_in = tokens.get(\"expires_in\", 3600)  # Default to 3600 seconds\n\n            # Update SpotifyAccount with the new token and expiry\n            spotify_account.access_token = new_access_token\n            spotify_account.expires_at = timezone.now() + timedelta(seconds=expires_in)\n            spotify_account.save()\n\n            return new_access_token\n        else:\n            raise Exception(f\"Failed to refresh token: {response.status_code} {response.text}\")\n\n    except SpotifyAccount.DoesNotExist:\n        raise Exception(\"Spotify account not linked to this user.\")\n\ndef get_user_profile(access_token):\n    \"\"\"Get the current user's Spotify profile information.\"\"\"\n    url = \"https://api.spotify.com/v1/me\"\n    headers = {\"Authorization\": f\"Bearer {access_token}\"}\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        response.raise_for_status()\n\n\n\n# Top Songs (Medium Term)\ndef get_top_songs(access_token, limit=10):\n    url = \"https://api.spotify.com/v1/me/top/tracks\"\n    headers = {\"Authorization\": f\"Bearer {access_token}\"}\n    params = {\"time_range\": \"medium_term\", \"limit\": limit}\n    response = requests.get(url, headers=headers, params=params)\n\n    if response.status_code == 200:\n        items = response.json().get('items', [])\n        # Extract detailed song information for the template\n        songs = []\n        for track in items:\n            songs.append({\n                'name': track.get('name', 'Unknown Song'),  # Add safe default\n                'artist': track['artists'][0]['name'] if track.get('artists') else 'Unknown Artist',\n                'album': track['album']['name'] if track.get('album') else 'Unknown Album',\n                'cover': track['album']['images'][0]['url'] if track.get('album') and track['album'].get('images') else 'https://via.placeholder.com/150',\n                'spotify_url': track['external_urls']['spotify'] if track.get('external_urls') else '#',\n                'duration_ms': track.get('duration_ms', 0)  # Add a safe default\n            })\n        return songs\n    else:\n        print(f\"Error fetching top songs: {response.status_code}\")\n        return []  # Return an empty list as a fallback\n\n\n\n\n# Top Artists (Medium Term)\ndef get_top_artists(access_token, limit=5):\n    url = \"https://api.spotify.com/v1/me/top/artists\"\n    headers = {\"Authorization\": f\"Bearer {access_token}\"}\n    params = {\"time_range\": \"medium_term\", \"limit\": limit}\n    response = requests.get(url, headers=headers, params=params)\n    if response.status_code == 200:\n        items = response.json().get('items', [])\n        if items:\n            top_artists = [\n                {\n                    'name': artist['name'],\n                    'image_url': artist['images'][0]['url'] if artist['images'] else None,\n                    'genres': ', '.join(artist['genres'][:2])  # Limit to 2 genres for brevity\n                }\n                for artist in items\n            ]\n            return top_artists\n        else:\n            return [{\"name\": \"Looks like you have never listened to any artists.\", \"image_url\": None, \"genres\": \"\"}]\n    else:\n        print(f\"Error fetching top artists: {response.status_code}\")\n        return [{\"name\": \"Error fetching data from Spotify.\", \"image_url\": None, \"genres\": \"\"}]\n\n\n\n# Top Genres (Medium Term)\ndef get_top_genres(access_token):\n    top_artists = get_top_artists(access_token, limit=20)\n    if isinstance(top_artists, list) and \"Looks like you have never listened to any artists.\" in top_artists:\n        return [\"Looks like you have never listened to any genres.\"]\n\n    genres = []\n    for artist in top_artists:\n        genres.extend(artist.get('genres', []))\n    if not genres:\n        return [\"Looks like you have never listened to any genres.\"]\n\n    # Count occurrences of each genre\n    genre_counts = {genre: genres.count(genre) for genre in set(genres)}\n\n    # Sort genres by count (descending) and take the top 5\n    top_5_genres = sorted(genre_counts.items(), key=lambda x: x[1], reverse=True)[:5]\n\n    # Return only the genre names\n    return [genre for genre, count in top_5_genres]\n\n\n\n# Estimated Listening Time (Medium Term)\ndef get_total_minutes_listened(access_token):\n    top_tracks = get_top_songs(access_token, limit=50)\n    if isinstance(top_tracks, list) and \"Looks like you have never listened to any songs.\" in top_tracks:\n        return \"Looks like you have no listening time recorded.\"\n\n    play_count = 30  # Approximate number of times each track was played over the medium term\n    total_ms = sum(track['duration_ms'] * play_count for track in top_tracks if isinstance(track, dict))\n    return total_ms / 1000.0 / 60.0\n\n\n\n# Estimated Sound Town (Medium Term)\ndef get_sound_town(top_genres):\n    if isinstance(top_genres, list) and \"Looks like you have never listened to any genres.\" in top_genres:\n        return \"No Sound Town available.\"\n\n    town_profiles = {\n        \"Pop City\": [\"pop\", \"dance pop\", \"pop rock\"],\n        \"Jazz Town\": [\"jazz\", \"smooth jazz\", \"soul\"],\n        \"Rockville\": [\"rock\", \"hard rock\", \"alternative rock\"],\n    }\n    for town, genres in town_profiles.items():\n        if any(genre in top_genres for genre in genres):\n            return town\n    return \"Unknown Sound Town\"\n\n\n\n\n\n# Artist Messages (Mocked, Medium Term)\ndef get_artist_thank_you(access_token):\n    top_artists = get_top_artists(access_token)\n    if isinstance(top_artists, list) and \"Looks like you have never listened to any artists.\" in top_artists:\n        return {\"Message\": \"Looks like you have no artist messages.\"}\n\n    messages = {artist['name']: f\"Thank you for listening to {artist['name']}!\" for artist in top_artists}\n    return messages
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Wrappedapp/spotify_api_functions.py b/Wrappedapp/spotify_api_functions.py
--- a/Wrappedapp/spotify_api_functions.py	(revision 8f9038fc25f3a734f8631807625a07bbbcaf0428)
+++ b/Wrappedapp/spotify_api_functions.py	(date 1732819290278)
@@ -23,6 +23,8 @@
 from django.shortcuts import redirect
 from Wrappedapp.models import SpotifyWrapped, SpotifyAccount
 from django.utils import timezone
+import requests
+from .models import SpotifyToken
 
 openai.api_key = settings.OPENAI_API_KEY
 client_id = settings.SPOTIFY_CLIENT_ID
@@ -195,4 +197,27 @@
         return {"Message": "Looks like you have no artist messages."}
 
     messages = {artist['name']: f"Thank you for listening to {artist['name']}!" for artist in top_artists}
-    return messages
\ No newline at end of file
+    return messages
+
+def refresh_spotify_token(user):
+    try:
+        token = SpotifyToken.objects.get(user=user)
+    except SpotifyToken.DoesNotExist:
+        raise Exception("SpotifyToken does not exist for this user.")
+
+    if token.is_expired:
+        url = "https://accounts.spotify.com/api/token"
+        data = {
+            'grant_type': 'refresh_token',
+            'refresh_token': token.refresh_token,
+            'client_id': 'your_client_id',
+            'client_secret': 'your_client_secret',
+        }
+        response = requests.post(url, data=data)
+        if response.status_code == 200:
+            response_data = response.json()
+            token.update_token(response_data['access_token'], response_data['expires_in'])
+        else:
+            raise Exception(f"Failed to refresh token: {response.json()}")
+
+    return token.access_token
Index: Wrappedapp/templates/wrapped_carousel.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% extends \"base.html\" %}\n{% load django_bootstrap5 %}\n\n{% block title %}Spotify Wrapped{% endblock %}\n\n{% block content %}\n\n<div class=\"container-fluid p-0\" style=\"height: 100vh; width: 100vw;\">\n    <!-- Carousel -->\n    <div id=\"spotifyWrappedCarousel\" class=\"carousel slide\" data-bs-ride=\"carousel\" style=\"height: 100%; width: 100%;\">\n        <div class=\"carousel-inner\" style=\"height: 100%; width: 100%;\">\n\n            <!-- Slide 1: Welcome -->\n            <div class=\"carousel-item active animated-background\">\n                <div class=\"dynamic-shapes\">\n                    <div class=\"circle large\"></div>\n                    <div class=\"circle medium\"></div>\n                    <div class=\"circle small\"></div>\n                    <div class=\"circle tiny\"></div>\n                    <div class=\"flower\"></div>\n                    <div class=\"flower small\"></div>\n                    <div class=\"star floating\"></div>\n                    <div class=\"star shooting\"></div>\n                    <div class=\"star shooting alternate\"></div>\n                </div>\n                <div class=\"d-flex flex-column align-items-center justify-content-center text-container\" style=\"height: 100%;\">\n                    <h1 class=\"welcome-title text-animate-fade\">Welcome to Your Spotify Wrapped</h1>\n                    <h2 class=\"welcome-name text-animate-slide\">{{ wrapped.user }}'s 2024 Music Journey</h2>\n                    <p class=\"welcome-subtext text-animate-zoom\">Dive into your personalized music stats!</p>\n                </div>\n            </div>\n\n            <!-- Slide 2: Total Listening Time -->\n            <div class=\"carousel-item animated-background\">\n                <div class=\"dynamic-shapes\">\n                    <div class=\"circle large\"></div>\n                    <div class=\"circle medium\"></div>\n                    <div class=\"circle small\"></div>\n                    <div class=\"circle tiny\"></div>\n                    <div class=\"flower\"></div>\n                    <div class=\"flower small\"></div>\n                    <div class=\"star floating\"></div>\n                    <div class=\"star shooting\"></div>\n                    <div class=\"star shooting alternate\"></div>\n                </div>\n                <div class=\"d-flex flex-column align-items-center justify-content-center text-container\" style=\"height: 100%;\">\n                    <h1 class=\"listening-title text-animate-fade\">Total Listening Time</h1>\n                    <p class=\"listening-subtext text-animate-hover\">\n                        You spent <span class=\"highlight\">{{ wrapped.total_minutes_listened }}</span> minutes listening this year!\n                    </p>\n                </div>\n            </div>\n\n\n            <!-- Slide 3: Your Top Artists -->\n            <div class=\"carousel-item animated-background\">\n                <div class=\"dynamic-shapes\">\n                    <div class=\"circle large\"></div>\n                    <div class=\"circle medium\"></div>\n                    <div class=\"circle small\"></div>\n                    <div class=\"circle tiny\"></div>\n                    <div class=\"flower\"></div>\n                    <div class=\"flower small\"></div>\n                    <div class=\"star floating\"></div>\n                    <div class=\"star shooting\"></div>\n                    <div class=\"star shooting alternate\"></div>\n                </div>\n                <div class=\"d-flex flex-column align-items-center justify-content-center text-container\" style=\"height: 100%;\">\n                    <h1 class=\"artists-title text-animate-zoom\">Your Top Artists</h1>\n                    <div class=\"artist-list\">\n                        {% for artist in wrapped.top_artists %}\n                        <div class=\"artist-item\">\n                            {% if artist.image_url %}\n                            <img src=\"{{ artist.image_url }}\" alt=\"{{ artist.name }}'s image\" class=\"artist-image\">\n                            {% else %}\n                            <div class=\"artist-image\" style=\"background-color: gray;\"></div>\n                            {% endif %}\n                            <div class=\"artist-details\">\n                                <div class=\"artist-name\">{{ artist.name }}</div>\n                                {% if artist.genres %}\n                                <div class=\"artist-genres\">Genres: {{ artist.genres }}</div>\n                                {% endif %}\n                            </div>\n                        </div>\n                        {% endfor %}\n                    </div>\n                </div>\n            </div>\n\n\n            <!-- Slide 4: Music Trends -->\n            <div class=\"carousel-item animated-background\">\n                <div class=\"dynamic-shapes\">\n                    <div class=\"circle large\"></div>\n                    <div class=\"circle medium\"></div>\n                    <div class=\"circle small\"></div>\n                    <div class=\"circle tiny\"></div>\n                    <div class=\"flower\"></div>\n                    <div class=\"flower small\"></div>\n                    <div class=\"star floating\"></div>\n                    <div class=\"star shooting\"></div>\n                    <div class=\"star shooting alternate\"></div>\n                </div>\n                <div class=\"d-flex flex-column align-items-center justify-content-center text-container\" style=\"height: 100%;\">\n                    <h1 class=\"trends-title text-animate-slide\">Music Trends</h1>\n                    <p class=\"trends-subtext text-animate-fade\">You listened to <span class=\"highlight\">more Pop</span> and <span class=\"highlight\">Hip-Hop</span> than ever before!</p>\n                </div>\n            </div>\n\n            <!-- Slide 5: Listening Personality -->\n            <div class=\"carousel-item animated-background\">\n                <div class=\"dynamic-shapes\">\n                    <div class=\"circle large\"></div>\n                    <div class=\"circle medium\"></div>\n                    <div class=\"circle small\"></div>\n                    <div class=\"circle tiny\"></div>\n                    <div class=\"flower\"></div>\n                    <div class=\"flower small\"></div>\n                    <div class=\"star floating\"></div>\n                    <div class=\"star shooting\"></div>\n                    <div class=\"star shooting alternate\"></div>\n                </div>\n                <div class=\"d-flex flex-column align-items-center justify-content-center text-container\" style=\"height: 100%;\">\n                    <h1 class=\"personality-title text-animate-slide\">\n                        Your Listening Personality\n                    </h1>\n                    <h2 class=\"personality-highlight text-animate-zoom\">\n                        You are <span class=\"highlight\">{{ wrapped.personality_word }}</span> listener!\n                    </h2>\n                    <p class=\"personality-description text-animate-fade\">\n                        This {{ wrapped.personality }}\n                    </p>\n                    <p class=\"personality-subtext text-animate-hover\">\n                        Discover how your music habits define your unique listening traits.\n                    </p>\n                </div>\n            </div>\n\n                        <!-- Slide: Your Top Songs -->\n            <div class=\"carousel-item animated-background\">\n                <div class=\"dynamic-shapes\">\n                    <div class=\"circle large\"></div>\n                    <div class=\"circle medium\"></div>\n                    <div class=\"circle small\"></div>\n                    <div class=\"circle tiny\"></div>\n                    <div class=\"flower\"></div>\n                    <div class=\"flower small\"></div>\n                    <div class=\"star floating\"></div>\n                    <div class=\"star shooting\"></div>\n                    <div class=\"star shooting alternate\"></div>\n                </div>\n                <div class=\"d-flex flex-column align-items-center justify-content-center text-container\" style=\"height: 100%;\">\n                    <h1 class=\"title text-animate-fade\">Your Top Songs</h1>\n                    <div class=\"top-songs-container\">\n                        {% for song in top_songs %}\n                        <div class=\"top-song-item\">\n                            <img src=\"{{ song.cover }}\" alt=\"Album cover for {{ song.name }}\" class=\"album-cover\">\n                            <div class=\"song-details\">\n                                <h3 class=\"song-title\">{{ song.name }}</h3>\n                                <p class=\"artist-name\">By: {{ song.artist }}</p>\n                                <p class=\"album-name\">Album: {{ song.album }}</p>\n                                <a href=\"{{ song.spotify_url }}\" target=\"_blank\" class=\"spotify-link\">Open on Spotify</a>\n                                <button id=\"togglePlay\" data-uri=\"{{ song.spotify_url }}\">Play</button>\n                            </div>\n                        </div>\n                        {% endfor %}\n                    </div>\n                </div>\n            </div>\n\n\n\n        <!-- Carousel Controls -->\n        <button class=\"carousel-control-prev static-arrow\" type=\"button\" data-bs-target=\"#spotifyWrappedCarousel\" data-bs-slide=\"prev\">\n            <span class=\"carousel-control-prev-icon no-hover\" aria-hidden=\"true\"></span>\n            <span class=\"visually-hidden\">Previous</span>\n        </button>\n        <button class=\"carousel-control-next static-arrow\" type=\"button\" data-bs-target=\"#spotifyWrappedCarousel\" data-bs-slide=\"next\">\n            <span class=\"carousel-control-next-icon no-hover\" aria-hidden=\"true\"></span>\n            <span class=\"visually-hidden\">Next</span>\n        </button>\n        </div>\n    </div>\n</div>\n\n\n\n\n<style>\n    /* Text Animations */\n    .text-animate-fade {\n        animation: fadeIn 2s ease-in-out;\n    }\n    @keyframes fadeIn {\n        0% { opacity: 0; }\n        100% { opacity: 1; }\n    }\n\n    .text-animate-slide {\n        animation: slideIn 2s ease-in-out;\n    }\n    @keyframes slideIn {\n        0% { transform: translateX(-100%); }\n        100% { transform: translateX(0); }\n    }\n\n    .text-animate-zoom {\n        animation: zoomIn 2s ease-in-out;\n    }\n    @keyframes zoomIn {\n        0% { transform: scale(0.5); opacity: 0; }\n        100% { transform: scale(1); opacity: 1; }\n    }\n\n    .text-animate-hover:hover {\n        transform: scale(1.1);\n        transition: transform 0.3s ease-in-out;\n    }\n    @keyframes colorShift {\n        0% { background: linear-gradient(45deg, #1DB954, #191414); }\n        25% { background: linear-gradient(45deg, #FF007F, #590FB7); }\n        50% { background: linear-gradient(45deg, #FFC312, #EE5A24); }\n        75% { background: linear-gradient(45deg, #16A085, #27AE60); }\n        100% { background: linear-gradient(45deg, #1DB954, #191414); }\n    }\n\n    .animated-background {\n        animation: colorShift 12s infinite;\n        background-size: 300% 300%;\n        height: 100%;\n    }\n\n    /* Dynamic Shapes */\n    .dynamic-shapes {\n        position: absolute;\n        width: 100%;\n        height: 100%;\n        overflow: hidden;\n        z-index: 0;\n    }\n\n    .circle {\n        position: absolute;\n        background: rgba(255, 255, 255, 0.1);\n        border-radius: 50%;\n        animation: float 10s infinite ease-in-out;\n    }\n\n    .circle.small { width: 100px; height: 100px; top: 25%; left: 15%; }\n    .circle.medium { width: 150px; height: 150px; top: 50%; left: 50%; }\n    .circle.large { width: 200px; height: 200px; top: 10%; left: 60%; }\n    .circle.tiny { width: 80px; height: 80px; top: 75%; left: 80%; }\n\n    .flower {\n        position: absolute;\n        width: 120px;\n        height: 120px;\n        background: radial-gradient(circle, #16A085, #27AE60);\n        clip-path: polygon(50% 0%, 61% 35%, 100% 35%, 68% 57%, 80% 91%, 50% 70%, 21% 91%, 32% 57%, 0 35%, 39% 35%);\n        top: 70%;\n        left: 20%;\n        animation: float 12s infinite ease-in-out;\n    }\n\n    .flower.small { width: 80px; height: 80px; top: 40%; left: 75%; }\n\n    .star {\n        position: absolute;\n        width: 40px;\n        height: 40px;\n        background: linear-gradient(135deg, #FF007F, #FFC312);\n        clip-path: polygon(50% 0%, 61% 35%, 98% 35%, 68% 57%, 79% 91%, 50% 70%, 21% 91%, 32% 57%, 2% 35%, 39% 35%);\n    }\n\n    .star.floating {\n        animation: float 8s infinite ease-in-out;\n        top: 20%;\n        left: 10%;\n    }\n\n    .star.shooting {\n        animation: shootDiagonal 8s infinite linear;\n        top: 10%;\n        left: -20%;\n    }\n\n    .star.shooting.alternate {\n        animation: shootDiagonalAlternate 10s infinite linear;\n        top: 30%;\n        left: -30%;\n    }\n\n    @keyframes shootDiagonal {\n        0% { transform: translate(0, 0); }\n        100% { transform: translate(120vw, 100vh); }\n    }\n\n    @keyframes shootDiagonalAlternate {\n        0% { transform: translate(0, 0); }\n        100% { transform: translate(120vw, -100vh); }\n    }\n\n    @keyframes float {\n        0%, 100% { transform: translateY(0); }\n        50% { transform: translateY(-20px); }\n    }\n\n    /* Arrows */\n    .static-arrow {\n        width: 50px;\n        height: 50px;\n        top: 50%;\n        transform: translateY(-50%);\n    }\n\n    .carousel-control-prev-icon,\n    .carousel-control-next-icon {\n        background-color: rgba(0, 0, 0, 0.5);\n        border-radius: 50%;\n        width: 50px;\n        height: 50px;\n    }\n\n    .no-hover {\n        transition: none !important;\n    }\n\n    /* Text Styling */\n    .text-container {\n        position: relative;\n        z-index: 1;\n        color: white;\n        text-align: center;\n    }\n\n    .welcome-title,\n    .listening-title,\n    .artists-title,\n    .trends-title {\n        font-family: 'Arial Black', sans-serif;\n        font-size: 3rem;\n        margin-bottom: 0.5rem;\n    }\n\n    .welcome-name {\n        font-size: 2rem;\n        font-family: 'Arial', sans-serif;\n        margin-bottom: 1rem;\n    }\n\n    .welcome-subtext,\n    .listening-subtext,\n    .trends-subtext {\n        font-size: 1.25rem;\n        font-family: 'Arial', sans-serif;\n    }\n\n    .artists-list li {\n        font-size: 1.5rem;\n        line-height: 2rem;\n    }\n\n    .highlight {\n        color: #FFC312;\n        font-weight: bold;\n    }\n\n    /* Artist list container */\n    .artist-list {\n        display: flex;                  /* Use flexbox for layout */\n        flex-wrap: wrap;                /* Wrap items to the next row if needed */\n        justify-content: center;        /* Center items horizontally */\n        gap: 20px;                      /* Space between artist items */\n        max-width: 90%;                 /* Restrict the width of the entire list */\n        padding: 20px;                  /* Add padding around the list */\n    }\n\n    /* Individual artist items */\n    .artist-item {\n        display: flex;                  /* Flex layout for image and details */\n        flex-direction: column;         /* Stack image and text vertically */\n        align-items: center;            /* Center-align text and image */\n        background-color: #282828;      /* Dark Spotify-like background */\n        border-radius: 10px;            /* Rounded corners */\n        padding: 10px;                  /* Add padding inside each item */\n        width: 150px;                   /* Limit the width of each item */\n        text-align: center;             /* Center-align text */\n        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.2); /* Subtle shadow for depth */\n    }\n\n    /* Artist image */\n    .artist-image {\n        border-radius: 50%;             /* Circular image */\n        width: 100px;                   /* Fixed width */\n        height: 100px;                  /* Fixed height */\n        object-fit: cover;              /* Crop and fit the image */\n        margin-bottom: 10px;            /* Space between image and details */\n    }\n\n    /* Artist details */\n    .artist-details .artist-name {\n        font-size: 16px;                /* Adjust font size */\n        font-weight: bold;              /* Bold text for names */\n        color: white;                   /* White text for better contrast */\n        margin-bottom: 5px;             /* Space between name and genres */\n    }\n\n    .artist-details .artist-genres {\n        font-size: 14px;                /* Smaller font for genres */\n        color: #a3a3a3;                 /* Lighter color for genres */\n    }\n\n    /* Responsive adjustments for smaller screens */\n    @media (max-width: 768px) {\n        .artist-item {\n            width: 120px;               /* Reduce item size for smaller screens */\n        }\n\n        .artist-image {\n            width: 80px;                /* Adjust image size for smaller screens */\n            height: 80px;\n        }\n\n        .artist-details .artist-name {\n            font-size: 14px;            /* Adjust font size */\n        }\n\n        .artist-details .artist-genres {\n            font-size: 12px;            /* Adjust font size */\n        }\n    }\n\n        /* Personality Slide Title */\n    .personality-title {\n        font-family: 'Arial Black', sans-serif;\n        font-size: 3rem;\n        margin-bottom: 1rem;\n        color: #fff;\n    }\n\n    /* Highlight Style */\n    .personality-highlight {\n        font-family: 'Arial Black', sans-serif;\n        font-size: 2.5rem;\n        color: #FFC312; /* Highlight in gold */\n        margin-bottom: 1rem;\n    }\n\n    /* Description Text */\n    .personality-description {\n        font-family: 'Arial', sans-serif;\n        font-size: 1.25rem;\n        color: white;\n        max-width: 80%; /* Limit the width to 80% of the container */\n        margin: 0 auto; /* Center-align the text */\n        text-align: center; /* Ensure text is center-aligned */\n        line-height: 1.6; /* Add line spacing for better readability */\n        padding: 10px; /* Add padding for spacing */\n        background: rgba(0, 0, 0, 0.5); /* Add a subtle background for contrast */\n        border-radius: 10px; /* Rounded corners for a polished look */\n    }\n\n    /* Subtext Styling */\n    .personality-subtext {\n        font-family: 'Arial', sans-serif;\n        font-size: 1rem;\n        color: #a3a3a3;\n        text-align: center;\n        margin-top: 1rem;\n    }\n\n    /* Adjust Responsiveness */\n    @media (max-width: 768px) {\n        .personality-title {\n            font-size: 2rem; /* Reduce font size on smaller screens */\n        }\n\n        .personality-highlight {\n            font-size: 1.8rem;\n        }\n\n        .personality-description {\n            font-size: 1rem; /* Smaller font for mobile */\n            max-width: 90%; /* Adjust width for smaller screens */\n        }\n\n        .personality-subtext {\n            font-size: 0.9rem;\n        }\n    }\n    /* Top Songs Slide */\n    /* Top Songs Slide */\n    .top-songs-container {\n        display: flex;\n        flex-wrap: wrap;\n        justify-content: center;\n        gap: 20px;\n        max-width: 90%;\n        padding: 20px;\n    }\n\n    .top-song-item {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        background: rgba(0, 0, 0, 0.7);\n        border-radius: 10px;\n        padding: 15px;\n        width: 200px;\n        text-align: center;\n        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.2);\n    }\n\n    .album-cover {\n        width: 100%;\n        border-radius: 5px;\n        margin-bottom: 10px;\n    }\n\n    .song-title {\n        font-size: 1.2rem;\n        font-weight: bold;\n        margin: 5px 0;\n        color: white;\n    }\n\n    .artist-name, .album-name {\n        font-size: 1rem;\n        margin: 5px 0;\n        color: #FFC312;\n    }\n\n    .spotify-link {\n        margin-top: 10px;\n        color: #1DB954;\n        text-decoration: none;\n        font-weight: bold;\n    }\n\n    .spotify-link:hover {\n        text-decoration: underline;\n    }\n\n\n\n</style>\n{% endblock %}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Wrappedapp/templates/wrapped_carousel.html b/Wrappedapp/templates/wrapped_carousel.html
--- a/Wrappedapp/templates/wrapped_carousel.html	(revision 8f9038fc25f3a734f8631807625a07bbbcaf0428)
+++ b/Wrappedapp/templates/wrapped_carousel.html	(date 1732819421929)
@@ -159,8 +159,7 @@
                                 <h3 class="song-title">{{ song.name }}</h3>
                                 <p class="artist-name">By: {{ song.artist }}</p>
                                 <p class="album-name">Album: {{ song.album }}</p>
-                                <a href="{{ song.spotify_url }}" target="_blank" class="spotify-link">Open on Spotify</a>
-                                <button id="togglePlay" data-uri="{{ song.spotify_url }}">Play</button>
+                                <button class="play-button" data-uri="{{ song.uri }}">Play</button>
                             </div>
                         </div>
                         {% endfor %}
